//
//  {{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit
import Bond
import Amber
import CollectionKit
//import Animatics
//import AnimaticsBond

let {{ module_info.name }}Module = {{ module_info.name }}Controller.self

final class {{ module_info.name }}Controller: UIViewController, AmberController {

    let store = AmberStore(reducer: {{ module_info.name }}Reducer(), router: {{ module_info.name }}Router())

    static let storyboardFile = "{{ module_info.name }}"
    static let storyboardID = "{{ module_info.name }}Controller"

    private let dataProvider = ArrayDataProvider<{{ module_info.name }}Model>(data: [])

    //MARK: - IBOutlets
    @IBOutlet weak var collectionView: CollectionView!

    
    //MARK: - Life cycle
    override func viewDidLoad() {
        super.viewDidLoad()

        setupCollectionView()
        bind()
    }

    //MARK: - IBActions

}

//MARK: - Bindings
extension {{ module_info.name }}Controller{
    func bind(){
        _ = state.map { $0.itemsToDisplay }
            .distinct { $0 != $1 }
            .observeNext { [unowned self] in
                self.dataProvider.data = $0
            }        
    }
}

//MARK: - Setup CollectionView
extension {{ module_info.name }}Controller{
    func setupCollectionView(){
        collectionView.contentInset = UIEdgeInsets(top: 0, left: 16, bottom: 0, right: 16)
        let provider = CollectionProvider(
            dataProvider: dataProvider,
            viewGenerator: { _, _ in {{ module_info.name }}Cell.loadFromNib() },
            viewUpdater: { (view: {{ module_info.name }}Cell, data, index) in
                view.titleLabel.text = data.title
                view.clipsToBounds = false
            },
            tapHandler: { [unowned self] view, index, dataProvider in
                self.perform(transitions: .show(dataProvider.data(at: index)))
            }
        )
        
        provider.presenter = WobblePresenter()
        provider.layout = FlowLayout(lineSpacing: 30)
        provider.sizeProvider = { (index, model, size) -> CGSize in
            return CGSize(width: size.width, height: 74)
        }
        collectionView.provider = provider
    }
}

//MARK: - Helpers
extension {{ module_info.name }}Controller{

}

